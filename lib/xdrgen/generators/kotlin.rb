module Xdrgen
  module Generators
    class Kotlin < Xdrgen::Generators::Base
      def generate
        @already_rendered = []
        @file_extension = "kt"

        path = "XDRTypes.#{@file_extension}"
        @out = @output.open path
        render_top_matter @out

        render_definitions @top
      end

      def render_definitions(node)
        node.namespaces.each { |n| render_definitions n }
        node.definitions.each { |n| render_definition n }
      end

      def render_definition(defn)
        case defn
        when AST::Definitions::Enum ;
          render_element defn do
            render_enum defn
          end
        when AST::Definitions::Typedef ;
          render_element defn do
            render_typedef defn
          end
        end
      end

      def render_element(defn)
        out = @out

        render_source_comment defn
        yield
        out.break
      end

      def render_enum(enum)
        out = @out

        out.puts "public enum class #{name_string enum.name}(val value: Int): XdrEncodable {"
        out.indent do
          enum.members.each do |em|
            out.puts "#{em.name}(#{em.value}),"
          end
          out.puts ";"
          out.break
          out.puts <<-EOS.strip_heredoc
          override fun toXdr(stream: XdrDataOutputStream) {
              value.toXdr(stream)
          }
          EOS
        end
        out.puts "}"
      end

      def render_typedef(typedef)
        out = @out

        name = name_string typedef.name
        unless @already_rendered.include? name
          out.puts "public typealias #{name} = #{decl_string typedef.declaration}"
        end
      end

      def render_top_matter(out)
        out.puts <<-EOS.strip_heredoc
          // Automatically generated by xdrgen 
          // DO NOT EDIT or your changes may be overwritten

          package #{@namespace};

          import #{@namespace}.utils.*
        EOS
        out.break
      end

      def render_source_comment(defn)
        out = @out

        return if defn.is_a?(AST::Definitions::Namespace)

        out.puts <<-EOS.strip_heredoc
        // === xdr source ============================================================

        EOS

        out.puts "//  " + defn.text_value.split("\n").join("\n//  ")

        out.puts <<-EOS.strip_heredoc

        //  ===========================================================================
        EOS
      end

      def render_fixed_size_opaque_type(decl)
        name = "XDRDataFixed#{decl.size}"

        unless @already_rendered.include? name
          @already_rendered << name

          out = @output.open "#{name}.#{@file_extension}"
          render_top_matter out
          out.puts <<-EOS.strip_heredoc
          /// Fixed length byte array 
          class #{name}(byteArray: ByteArray): XdrFixedByteArray(byteArray) {
              override val size: Int
                  get() = #{decl.size}
          }
          EOS
        end
      end

      def decl_string(decl)
        case decl
        when AST::Declarations::Void
          ""
        when AST::Declarations::Opaque ;
          if decl.fixed?
            render_fixed_size_opaque_type decl
            "XDRDataFixed#{decl.size}"
          else
            "ByteArray"
          end
        when AST::Declarations::String ;
          "String"
        when AST::Declarations::Array ;
          if decl.fixed?
            "XDRArrayFixed<#{type_string decl.type}>"
          else
            "Array<#{type_string decl.type}>"
          end
        when AST::Declarations::Optional ;
          "#{type_string(decl.type)}?"
        when AST::Declarations::Simple ;
          type_string(decl.type)
        else
          raise "Unknown declaration type: #{decl.class.name}"
        end
      end

      def type_string(type)
        case type
        when AST::Typespecs::Int ;
          "Int"
        when AST::Typespecs::UnsignedInt ;
          "Int"
        when AST::Typespecs::Hyper ;
          "Long"
        when AST::Typespecs::UnsignedHyper ;
          "Long"
        when AST::Typespecs::Float ;
          raise "cannot render Float in Kotlin"
        when AST::Typespecs::Double ;
          raise "cannot render Double in Kotlin"
        when AST::Typespecs::Quadruple ;
          raise "cannot render Quadruple in Kotlin"
        when AST::Typespecs::Bool ;
          "Boolean"
        when AST::Typespecs::Opaque ;
          "ByteArray"
        when AST::Typespecs::Simple ;
          name type.resolved_type
        when AST::Concerns::NestedDefinition ;
          name type
        else
          raise "Unknown typespec: #{type.class.name}"
        end
      end

      def name(named)
        parent = name named.parent_defn if named.is_a?(AST::Concerns::NestedDefinition)
        result = named.name.camelize

        "#{parent}#{result}"
      end

      def enum_case_name(name)
        name.downcase.camelize :lower
      end

      def name_string(name)
        name.camelize
      end
    end
  end
end